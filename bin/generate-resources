#!/usr/bin/env bash

set -euo pipefail

here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

generated_dir="${here}/../resources/generated"
generated_img_dir="${generated_dir}/img"
generated_video_dir="${generated_dir}/video"
generated_html_dir="${generated_dir}/html"
tab="$(echo -e '\t')"

function resource-type
{
  case "${1}"
  in
    clj | cljc | jank)
      echo "clojure"
      ;;
    plot.clj)
      echo "clojure-plot"
      ;;
    hpp | cpp)
      echo "cpp"
      ;;
    md)
      echo "markdown"
      ;;
    *)
      echo "${1}"
  esac
}

# $1 = file
# $2 = resource type
# $3 = file sans extension
# $4 = makefile
function render
{
  local file resource_type file_sans_ext tmp_makefile
  file="$1"
  resource_type="$2"
  file_sans_ext="$3"
  tmp_makefile="$4"
  case "${resource_type}"
  in
    markdown)
      ;;

    css)
      ;;

    clojure-plot)
      cat >> "${tmp_makefile}" << EOF
${generated_img_dir}/${file_sans_ext}.svg:
${tab}echo "  Generating ${file_sans_ext}.svg"
${tab}mkdir -p "$(dirname "${generated_img_dir}/${file_sans_ext}")"
${tab}${here}/plot "${file}" "${generated_img_dir}/${file_sans_ext}.svg" 2>/dev/null
${tab}# Optimizing generated SVGs readies them for viewing. Without this step,
${tab}# they won't render properly.
${tab}#${here}/optimize-resources "${generated_img_dir}/${file_sans_ext}.svg"
EOF
      ;;

    # TODO: Keep this? Or put the images/videos elsewhere?
    svg|png)
      mkdir -p "$(dirname "${generated_img_dir}/${file_sans_ext}")"
      cp -f "${file}" "${generated_img_dir}/${file_sans_ext}.${resource_type}"
      ;;
    mp4)
      mkdir -p "$(dirname "${generated_video_dir}/${file_sans_ext}")"
      cp -f "${file}" "${generated_video_dir}/${file_sans_ext}.${resource_type}"
      ;;

    clojure | cpp | sh)
      cat >> "${tmp_makefile}" << EOF
${generated_html_dir}/${file_sans_ext}.html:
${tab}echo "  Generating ${file_sans_ext}.html"
${tab}mkdir -p "$(dirname "${generated_html_dir}/${file_sans_ext}")"
${tab}${here}/highlight "${file}" "${resource_type}" > "${generated_html_dir}/${file_sans_ext}.html"
EOF
      ;;

    ansi)
      cat >> "${tmp_makefile}" << EOF
${generated_html_dir}/${file_sans_ext}.html:
${tab}echo "  Generating ${file_sans_ext}.html"
${tab}mkdir -p "$(dirname "${generated_html_dir}/${file_sans_ext}")"
${tab}aha -f "${file}" > "${generated_html_dir}/${file_sans_ext}.html"
EOF
      ;;

    *)
      echo "Not rendering resource type ${resource_type}" 1>&2
      ;;
  esac
}

# $1 = makefile
function generate_all_target
{
  local targets
  targets="$(pcregrep -o1 '^(.*):$' "${1}")"

  cat >> "${tmp_makefile}" << EOF
all: ${targets//$'\n'/' '}
${tab}echo "Done!"
.SILENT:
.PHONY: all
EOF
}

function main
{
  rm -rf "${generated_dir}"
  mkdir -p "${generated_dir}" "${generated_img_dir}" "${generated_html_dir}"

  local resource_files tmp_makefile cpus
  resource_files="$(find "$@" -type f)"
  tmp_makefile="$(mktemp)"
  cpus=${CPUS:-$(nproc)}
  for file in ${resource_files};
  do
    local base_file file_sans_ext ext resource_type
    base_file="${file##resources/src/}"
    file_sans_ext="${base_file%.*}"
    ext="${base_file#*.}"
    resource_type="$(resource-type "${ext}")"

    render "${file}" "${resource_type}" "${file_sans_ext}" "${tmp_makefile}"
  done

  echo "Building makefile ${tmp_makefile}"
  generate_all_target "${tmp_makefile}"
  make -j"${cpus}" -f "${tmp_makefile}" all
}
main "$@"
